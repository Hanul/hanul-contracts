/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RNGTest } from "../RNGTest";

export class RNGTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(rngAddr: string, overrides?: Overrides): Promise<RNGTest> {
    return super.deploy(rngAddr, overrides || {}) as Promise<RNGTest>;
  }
  getDeployTransaction(
    rngAddr: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(rngAddr, overrides || {});
  }
  attach(address: string): RNGTest {
    return super.attach(address) as RNGTest;
  }
  connect(signer: Signer): RNGTest__factory {
    return super.connect(signer) as RNGTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RNGTest {
    return new Contract(address, _abi, signerOrProvider) as RNGTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rngAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed",
        type: "uint256",
      },
    ],
    name: "generate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "number",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b5060405161037338038061037383398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6102578061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634a7dd5231461003b5780638381f58a1461006b575b600080fd5b61005560048036038101906100509190610177565b610089565b60405161006291906101e0565b60405180910390f35b610073610147565b60405161008091906101e0565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634303707e836040518263ffffffff1660e01b81526004016100e591906101e0565b602060405180830381600087803b1580156100ff57600080fd5b505af1158015610113573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013791906101a4565b6001819055506001549050919050565b60015481565b60008135905061015c8161020a565b92915050565b6000815190506101718161020a565b92915050565b60006020828403121561018d5761018c610205565b5b600061019b8482850161014d565b91505092915050565b6000602082840312156101ba576101b9610205565b5b60006101c884828501610162565b91505092915050565b6101da816101fb565b82525050565b60006020820190506101f560008301846101d1565b92915050565b6000819050919050565b600080fd5b610213816101fb565b811461021e57600080fd5b5056fea26469706673582212207275e89df21a10dcf98403bd7cf37b55265fd6c15d8340dccea4cd953008bebf64736f6c63430008050033";
