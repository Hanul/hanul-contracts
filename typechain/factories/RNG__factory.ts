/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RNG } from "../RNG";

export class RNG__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<RNG> {
    return super.deploy(overrides || {}) as Promise<RNG>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RNG {
    return super.attach(address) as RNG;
  }
  connect(signer: Signer): RNG__factory {
    return super.connect(signer) as RNG__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RNG {
    return new Contract(address, _abi, signerOrProvider) as RNG;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed",
        type: "uint256",
      },
    ],
    name: "generateRandomNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b5061037c806100246000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634303707e14610030575b600080fd5b61004a600480360381019061004591906100da565b610060565b60405161005791906101cb565b60405180910390f35b6000600160008082825461007491906101e6565b925050819055506000543342844460014361008f919061023c565b406040516020016100a59695949392919061015b565b6040516020818303038152906040528051906020012060001c9050919050565b6000813590506100d48161032f565b92915050565b6000602082840312156100f0576100ef61031d565b5b60006100fe848285016100c5565b91505092915050565b61011861011382610270565b6102b6565b82525050565b61012f61012a82610282565b6102c8565b82525050565b61013e816102ac565b82525050565b610155610150826102ac565b6102e4565b82525050565b60006101678289610144565b6020820191506101778288610107565b6014820191506101878287610144565b6020820191506101978286610144565b6020820191506101a78285610144565b6020820191506101b7828461011e565b602082019150819050979650505050505050565b60006020820190506101e06000830184610135565b92915050565b60006101f1826102ac565b91506101fc836102ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610231576102306102ee565b5b828201905092915050565b6000610247826102ac565b9150610252836102ac565b925082821015610265576102646102ee565b5b828203905092915050565b600061027b8261028c565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006102c1826102d2565b9050919050565b6000819050919050565b60006102dd82610322565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b60008160601b9050919050565b610338816102ac565b811461034357600080fd5b5056fea2646970667358221220ad4314e0f735b5b1403d21ecec62d6ee050f52e834950f52115ae3ef40d50df664736f6c63430008050033";
